---
title: "HR and VO2max for RConf"
format: html
editor: visual
---


```{r libraries, echo = FALSE, message = FALSE}
library(tidyverse)
library(lubridate)
library(kableExtra)
library(janitor)
library(scales)
library(scico)       ## scico color palettes(http://www.fabiocrameri.ch/colourmaps.php) in R
library(ggtext)      ## add improved text rendering to ggplot2
library(ggforce)     ## add missing functionality to ggplot2
library(ggdist)      ## add uncertainity visualizations to ggplot2
# library(magick)      ## load images into R
library(patchwork)   ## combine outputs from ggplot2
# library(Cairo)

folder_for_plots <- "~/Dropbox/Programming/R_Stuff/RConf_Talk/RConf2022_health_export_slides_files/img/" 

path_saved_export <- "~/Dropbox/Programming/R_Stuff/john_vitals/Apple-Health-Data/"
path_to_healthexport1 <- "~/Documents/R_local_repos/applehealth1/R/"
# vo2max <- health_df |> filter(type == "VO2Max", sourceName == "Watch")
# resting_hr <- health_df |> filter(type == "RestingHeartRate", sourceName == "Watch")
# save(vo2max, resting_hr, file = paste0(path_saved_export, "vo2max_resting_hr.RData"))
load(paste0(path_saved_export, "vo2max_resting_hr.RData"))
resting_hr <- resting_hr |> filter(value < 90)
# load(paste0(path_saved_export,"save_processed_export.RData"))
```
```{r setup_ggplot, echo = FALSE}
# cribbed directly from: https://github.com/Z3tt/OutlierConf2021/blob/main/R/OutlierConf2021_ggplotWizardry_HandsOn.Rmd
# You should have package Cairo installed if you use ggsave:
# i.e., add device = cairo_pdf in ggsave call.
## change global theme settings (for all following plots)
#  IMPORTANT!!! open sans font must be installed (see next line)
# open sans downloaded from https://fonts.google.com/specimen/Open+Sans?preview.text_type=custom
# for tips on extra fonts on windows, see https://www.williamrchase.com/post/custom-fonts-and-plot-quality-with-ggplot-on-windows/
# based on William Chase, I may also try Alegreya Sans from https://www.huertatipografica.com/en/fonts/alegreya-sans-ht
theme_set(theme_minimal(base_size = 14, base_family = "Open Sans")) #originally 12
## modify plot elements globally (for all following plots)
theme_update(
  axis.ticks = element_line(color = "grey92"),
  axis.ticks.length = unit(.5, "lines"),
  panel.grid.minor = element_blank(),
  legend.title = element_text(size = 12),
  legend.text = element_text(color = "grey30"),
  plot.title = element_text(size = 16, face = "bold"),  # originally 18
  plot.subtitle = element_text(size = 10, color = "grey30"), # originally 12
  plot.caption = element_text(size = 9, margin = margin(t = 15))
)
```

```{r vo2max, echo = FALSE, message = FALSE}
# resting_hr <- health_df %>% filter(sourceName == "Watch") %>%
#   filter(type == "RestingHeartRate")

dup_resting <- resting_hr %>% count(local_date) %>% filter(n > 1) %>% arrange(desc(local_date))

hr_versions <- unique(resting_hr %>% filter(str_detect(sourceName, "Watch"), !is.na(sourceVersion)) %>%
                        select(sourceVersion)) %>%
  separate(sourceVersion, into = c("major", "minor", "subminor"), remove = FALSE) %>%
  mutate(subminor = ifelse(is.na(subminor), "0", subminor)) %>%
  arrange(sourceVersion)

hr_boundaries <- resting_hr %>%
  left_join(hr_versions, by = "sourceVersion") %>%
  arrange(sourceVersion, local_start, creationDate) %>%
  group_by(sourceVersion, major, minor, subminor) %>%
  summarise(first_date = first(local_start), last_date = last(local_start))

hr_boundaries <- hr_boundaries %>%
  ungroup() %>%
  arrange(first_date) %>%
  mutate(test = lag(major),
         test2 = lead(major),
         level = case_when(
           major != lag(major) ~ 3,
           minor != lag(minor) ~ 2,
           subminor != lag(subminor) ~ 1,
           TRUE ~ NA_real_
         ))

# vo2max <- health_df %>%
#   filter(type == "VO2Max", str_detect(sourceName, "Watch"))

vo_versions <- unique(vo2max %>% filter(type == "VO2Max", !is.na(sourceVersion)) %>%
                        select(sourceVersion)) %>%
  separate(sourceVersion, into = c("major", "minor", "subminor"), remove = FALSE) %>%
  mutate(subminor = ifelse(is.na(subminor), "0", subminor), major = as.numeric(major),
         minor = as.numeric(minor), subminor = as.numeric(subminor)) %>%
  arrange(major, minor, subminor)
vo2max2 <- vo2max %>%
  left_join(vo_versions, by = "sourceVersion") %>%
  arrange(sourceVersion, local_start, creationDate)
vo_boundaries <- vo2max2 %>%
  group_by(major, minor, subminor) %>%
  summarise(first_date = first(local_start), last_date = last(local_start))
min_date <- min(resting_hr$local_date[resting_hr$type == "RestingHeartRate"])
max_date <- max(resting_hr$local_date[resting_hr$type == "RestingHeartRate"])
min_resting_heart_rate <- min(resting_hr$value[resting_hr$type == "RestingHeartRate"])
half_year_sequence <- seq(floor_date(min_date, "year"), ceiling_date(max_date, "year"), by = "quarter")
half_year_sequence <- half_year_sequence[month(half_year_sequence) %in% c(1, 7)]
year_sequence = seq(floor_date(min_date, "year"), ceiling_date(max_date, "year"),
                    by = "year")


vo_boundaries <- vo_boundaries %>%
  ungroup() %>%
  arrange(first_date) %>%
  mutate(test = lag(major),
         test2 = lead(major),
         level = case_when(
           (major != lag(major)) | ((major > 0) & is.na(lag(major))) ~ 3,
           is.na(lag(major)) ~ 0,
           minor != lag(minor) ~ 2,
           subminor != lag(subminor) ~ 1,
           TRUE ~ NA_real_
         ))
p_vo2max1 <- ggplot(data = vo2max, aes(x = local_date, y = value)) +
  ylab("VO2 Max") + xlab(NULL) +
  ggtitle("My Estimated VO2 Max") +
  geom_point(size = 0.5)
p_vo2max2 <- p_vo2max1 # no smooth
p_vo2max3 <- p_vo2max2 +
  theme(plot.subtitle = ggtext::element_markdown()) +
  labs(subtitle = '<i style="color:#FFFFFF;"> </i>') +
  scale_x_date(limits = c(min_date + 0, max_date - 0),
               date_labels = "%b\n%Y",
               breaks = year_sequence)
p_vo2max4 <- p_vo2max3 +
  labs(subtitle = '<i style="color:#28A87D;">Vertical lines show major and minor versions of Watch OS</i>') +
   geom_richtext(data = hr_boundaries %>% filter(level == 3),
                aes(label = paste0("**v", sourceVersion, "**"), x = as_date(first_date), y = Inf),
                colour = "seagreen3", alpha = 0.9, hjust = 0, vjust = 1, nudge_x = 5, size = 3.5) +
  geom_vline(data = vo_boundaries %>% filter(level == 3),
             aes(xintercept = as_date(first_date)), size = 1, colour = "goldenrod1") +
  geom_vline(data = vo_boundaries %>% filter(level == 2),
             aes(xintercept = as_date(first_date)), size = 0.3, colour = "goldenrod3") +
  geom_vline(data = hr_boundaries %>% filter(level == 3),
             aes(xintercept = as_date(first_date)), size = 1, colour = "seagreen3") +
  geom_vline(data = hr_boundaries %>% filter(level == 2),
             aes(xintercept = as_date(first_date)), size = 0.3, colour = "seagreen2") +
  geom_vline(data = hr_boundaries %>% filter(level == 1),
             aes(xintercept = as_date(first_date)), size = 0.3, colour = "seagreen1", alpha = 0.6, linetype = "dotted") 

p_vo2max5 <- p_vo2max3 + 
  labs(subtitle = '<i style="color:#28A87D;">Vertical lines show major and minor versions of Watch OS</i>') +
   geom_richtext(data = hr_boundaries %>% filter(level == 3),
                aes(label = paste0("**v", sourceVersion, "**"), x = as_date(first_date), y = Inf),
                colour = "seagreen3", alpha = 0.9, hjust = 0, vjust = 1, nudge_x = 5, size = 3.5) +
  geom_vline(data = vo_boundaries %>% filter(level == 3),
             aes(xintercept = as_date(first_date)), size = 1, colour = "seagreen1") +
  geom_vline(data = vo_boundaries %>% filter(level == 2),
             aes(xintercept = as_date(first_date)), size = 0.3, colour = "seagreen3") +
  geom_vline(data = hr_boundaries %>% filter(level == 3),
             aes(xintercept = as_date(first_date)), size = 1, colour = "seagreen3") +
  geom_vline(data = hr_boundaries %>% filter(level == 2),
             aes(xintercept = as_date(first_date)), size = 0.3, colour = "seagreen2") +
  geom_vline(data = hr_boundaries %>% filter(level == 1),
             aes(xintercept = as_date(first_date)), size = 0.3, colour = "seagreen1", alpha = 0.6, linetype = "dotted") 

print(p_vo2max3)

ggsave(paste0(folder_for_plots, "VO2max without versions.png"), 
              plot = p_vo2max3, 
              width = 8, height = 4,
              device = "png")
ggsave(paste0(folder_for_plots, "VO2max with versions.png"), 
              plot = p_vo2max5, 
              width = 8, height = 4,
              device = "png")
# [Various VO2 Max estimates at home](https://9to5strength.com/vo2-max-testing/)
# https://www.runnersblueprint.com/vo2-max/

# [https://www.apple.com/newsroom/2020/12/cardio-fitness-notifications-are-available-today-on-apple-watch/]

# To search for clinical trials involving the Apple Watch, click
# [here](https://www.clinicaltrials.gov/ct2/results?recrs=ab&cond=&term=Apple+Watch&cntry=&state=&city=&dist=).

```
```{r scherer_tips1, eval = FALSE}
library(scico)       ## scico color palettes(http://www.fabiocrameri.ch/colourmaps.php) in R
library(ggtext)      ## add improved text rendering to ggplot2
library(ggforce)     ## add missing functionality to ggplot2
library(ggdist)      ## add uncertainity visualizations to ggplot2
library(patchwork)   ## combine outputs from ggplot2
# library(Cairo)
#   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #
#
# Here is the code to create the Resting Heart Rate plots
#
#   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #
#
# copied directly from: https://github.com/Z3tt/OutlierConf2021/blob/main/R/OutlierConf2021_ggplotWizardry_HandsOn.Rmd
# You should have package Cairo installed if you use ggsave:
# i.e., add device = cairo_pdf in ggsave call.
## change global theme settings (for all following plots)
#  IMPORTANT!!! open sans font must be installed (see next line)
# open sans downloaded from https://fonts.google.com/specimen/Open+Sans?preview.text_type=custom
# for tips on extra fonts on windows, see https://www.williamrchase.com/post/custom-fonts-and-plot-quality-with-ggplot-on-windows/
# based on William Chase, I may also try Alegreya Sans from https://www.huertatipografica.com/en/fonts/alegreya-sans-ht
# theme_set(theme_minimal(base_size = 12, base_family = "Open Sans")) #originally 12
# ## modify plot elements globally (for all following plots)
# theme_update(
#   axis.ticks = element_line(color = "grey92"),
#   axis.ticks.length = unit(.5, "lines"),
#   panel.grid.minor = element_blank(),
#   legend.title = element_text(size = 12),
#   legend.text = element_text(color = "grey30"),
#   plot.title = element_text(size = 16, face = "bold"),  # originally 18
#   plot.subtitle = element_text(size = 14, color = "grey30"), # originally 12
#   plot.caption = element_text(size = 9, margin = margin(t = 15)),
#   axis.title = element_text(size = 14),
#   axis.text = element_text(size = 14)
# )


p_noversion1 <- ggplot(data = resting_hr, aes(x = local_date, y = value)) +
  geom_point(size = 0.5, alpha = .6) +
  scale_x_date(limits = c(min_date + 0, max_date - 0),
               date_labels = "%b %Y",
               breaks = year_sequence)  +
  scale_y_continuous(breaks = seq(45, 65, by = 5),
                     limits = c(min_resting_heart_rate, NA)) +
  labs(
    title = 'My Resting Heart Rate (Daily) 2018 to 2022',
    # subtitle = 'Data from Apple Watch via Health Export',
    x = NULL,
    y = 'Resting Heart Rate'
  )
# ggsave("temp.png", p_noversion1, width = 9, height = 8, device = cairo_pdf, dpi = "retina")

#  as.hexmode(col2rgb("seagreen3"))   # #43cd80  (to use with HTML)
# I could have added some R code to create the HTML, but this is easier

p_noversion2 <- p_noversion1 +
  geom_smooth(fill = "lightgrey")
p_version0 <- p_noversion1 +
  # labs(subtitle = '<i style="color:#28A87D;">Vertical lines show major and minor versions of Watch OS</i>') +
  theme(
    plot.subtitle = ggtext::element_markdown())
# for printout I made alpha 0.6
# Changing to zero to get version that does not show lines
alpha_value <- 0.6
p_version1 <- p_version0 +
  geom_vline(data = hr_boundaries %>% filter(level == 3),
             aes(xintercept = as_date(first_date)), size = 1, colour = "seagreen3", alpha = alpha_value) +
  geom_richtext(data = hr_boundaries %>% filter(level == 3),
                aes(label = paste0("**v", sourceVersion, "**"), x = as_date(first_date), y = Inf),
                # colour = "seagreen3", alpha = 0.6, 
                colour = "darkgreen", alpha = (alpha_value > 0), 
                hjust = 0, vjust = 1, nudge_x = 5, size = 4.5) +
  geom_vline(data = hr_boundaries %>% filter(level == 2),
             aes(xintercept = as_date(first_date)), size = 0.3, colour = "seagreen2", alpha = alpha_value)
p_version2 = p_version1 + geom_smooth(fill = "lightgrey")
big_change <- hr_boundaries$first_date[hr_boundaries$sourceVersion == "7.0"] %>% as_date()
p_version3 <- p_version1 +
  geom_smooth(data = resting_hr %>% filter(local_date < big_change)) +
  geom_smooth(data = resting_hr %>% filter(local_date >= big_change))


alpha_value <- 0.6
p_version1 <- p_noversion1 +
  geom_vline(data = hr_boundaries %>% filter(level == 3),
             aes(xintercept = as_date(first_date)), size = 1, colour = "seagreen3", alpha = alpha_value) +
  geom_richtext(data = hr_boundaries %>% filter(level == 3),
                aes(label = paste0("**v", sourceVersion, "**"), x = as_date(first_date), y = Inf),
                # colour = "seagreen3", alpha = 0.6, 
                colour = "darkgreen", alpha = (alpha_value > 0), 
                hjust = 0, vjust = 1, nudge_x = 5, size = 4.5) +
  geom_vline(data = hr_boundaries %>% filter(level == 2),
             aes(xintercept = as_date(first_date)), size = 0.3, colour = "seagreen2", alpha = alpha_value)
p_noversion2 <- p_noversion1 +
  geom_smooth(fill = "lightgrey")

p_version2 = p_version1 + geom_smooth(fill = "lightgrey")
big_change <- hr_boundaries$first_date[hr_boundaries$sourceVersion == "7.0"] %>% as_date()

# resting hr rate with trend -- p_noversion2
# resting hr with version -- p_version2
# VO2max withouit versions
# VO2max with versions
ggsave(paste0(folder_for_plots, "resting hr rate with trend2.png"), 
              plot = p_noversion2, 
              width = 8, height = 4,
              device = "png")
ggsave(paste0(folder_for_plots, "resting hr with version2.png"), 
              plot = p_version2, 
              width = 8, height = 4,
              device = "png")

p_tod1 <- ggplot(data = resting_hr, aes(x = local_date, y =
                                          as.integer(difftime(local_end, floor_date(local_end, "day"), unit = "secs")) %>% hms::hms())) +
  geom_point(size = 0.5, alpha = 0.6) +
  geom_vline(data = hr_boundaries %>% filter(level == 3),
             aes(xintercept = as_date(first_date)), size = 1, colour = "seagreen3", alpha = 0.6) +
  geom_richtext(data = hr_boundaries %>% filter(level == 3),
                aes(label = paste0("**v", sourceVersion, "**"), x = as_date(first_date), y = Inf),
                colour = "seagreen3", alpha = 0.6, hjust = 0, vjust = 1, nudge_x = 5, size = 3.5) +
  geom_vline(data = hr_boundaries %>% filter(level == 2),
             aes(xintercept = as_date(first_date)), size = 0.3, colour = "seagreen2", alpha = 0.6) +
  geom_vline(data = hr_boundaries %>% filter(level == 1),
             aes(xintercept = as_date(first_date)), size = 0.3, colour = "seagreen1", alpha = 0.6, linetype = "dotted") +
  scale_x_date(limits = c(min_date + 0, max_date - 0),
               date_labels = "%b %Y",
               breaks = year_sequence)  +
  scale_y_time(labels = function(l) strftime(l, '%H:%M')) +  # thanks to https://stackoverflow.com/a/50173616/5828243
  labs(
    title = 'My Resting Heart Rate endDate Shown as Time of Day' ,
    subtitle = '<i style="color:#28A87D;">Vertical lines show major and minor versions of Watch OS</i>',
    x = NULL,
    y = 'Resting Heart Rate endDate (hours:minutes)'
  ) +
  theme(
    plot.subtitle = ggtext::element_markdown(),
    plot.title = ggtext::element_markdown())
# one can use the lines below to examine outliers
# resting_hr %>%
#   filter(sourceVersion > "7.",
#          as.integer(difftime(local_end, floor_date(local_end, "day"), unit = "secs")) > hms::hms(0,0,21)) %>%
#   select(value, local_start, local_end, creationDate, sourceVersion) %>%
#   View()
# p_tod1 + geom_point(data = resting_hr %>% filter(sourceVersion > "7.", as.integer(difftime(local_end, floor_date(local_end, "day"), unit = "secs")) > hms::hms(0,0,23)), colour = "red", size = 0.6, alpha = 0.6)
```
